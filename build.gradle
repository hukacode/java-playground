import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    alias(libs.plugins.jmh)
    alias(libs.plugins.spring.boot) apply false
    alias(libs.plugins.quarkus) apply false
    alias(libs.plugins.apt)
    alias(libs.plugins.spotless)
    alias(libs.plugins.spotbugs)
    id 'pmd'
    id 'jacoco'
    id 'maven-publish'
    id 'java'
}

description = 'Java Playground'

project.ext {
    springProjects = subprojects.findAll {
        it.name.startsWith('spring')
    }
    quarkusProjects = subprojects.findAll {
        it.name.startsWith('quarkus')
    }
}

configure(project.springProjects) {
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }
}

configure(project.quarkusProjects) {
    apply plugin: 'io.quarkus'

    dependencies {
        implementation enforcedPlatform(libs.quarkusBom)
    }
}

configure(allprojects) {
    apply plugin: 'java-library'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    group = 'dev.huka'

    java {
        withJavadocJar()
        withSourcesJar()
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    dependencies {
        implementation "com.github.hukacode:huka-common:main-SNAPSHOT"

        compileOnly libs.lombok
        annotationProcessor libs.lombok
        testCompileOnly libs.lombok
        testAnnotationProcessor libs.lombok

        implementation libs.mapstruct
        implementation libs.mapstructJdk8
        annotationProcessor libs.mapstructProcessor

        testImplementation libs.junitJupiter
        testImplementation libs.assertjCore
    }


    jacoco {
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file('build/jacocoHtml')
        }
    }

    pmd {
        ignoreFailures = true
        consoleOutput = true
        rulesMinimumPriority = 5
    }

    spotless {
//        ratchetFrom 'origin/main'
        format 'misc', {
            target '*.gradle', '*.md', '.gitignore'
            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
        java {
            toggleOffOn('formatter:off', 'formatter:on')
            target 'src/*/java/**/*.java'
//            importOrder('java', 'javax', 'org', 'com')
            removeUnusedImports()
            googleJavaFormat()
            licenseHeaderFile rootProject.file('config/spotless.license')
        }
    }
    compileJava.dependsOn spotlessApply

    spotbugs {
        ignoreFailures = true
        showStackTraces = true
        showProgress = true
        effort = 'default'
        reportLevel = 'default'
    }

    dependencies {
        spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'
    }

    tasks.matching { task -> task.name.startsWith('spotbugs') }.forEach {
        it.reports {
            html {
                enabled = true
                destination = file('build/spotbugs/main/spotbugs.html')
                stylesheet = 'fancy-hist.xsl'
            }
            xml.enabled = false
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }

}
